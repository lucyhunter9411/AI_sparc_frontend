trigger:
  branches:
    include:
      - main
      - develop
      - release/*

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '22.x'
      displayName: 'Install Node.js'

    - task: CmdLine@2
      displayName: 'npm install and build'
      inputs:
        script: |
          npm install
          npm run build --if-present

    - task: CmdLine@2
      displayName: 'Prepare output folder (build‚Äêartifacts)'
      inputs:
        script: |
          rm -rf output
          mkdir -p output
          cp -r .next/standalone/* output/        # Copy contents of .next/standalone (includes server.js)
          cp -r .next output/                     # Copy the entire .next directory
          rm -rf output/.next/cache               # Optional: Remove cache to reduce ZIP size
          cp -r public output/                    # Copy public folder
          cp package.json output/
          cp package-lock.json output/
          cp next.config.mjs output/

    - task: ArchiveFiles@2
      displayName: 'Zip artifact for deployment'
      inputs:
        rootFolderOrFile: 'output'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/release.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'node-app'
        publishLocation: 'Container'

# Dev Deployment Stage
- stage: Deploy_Dev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Azure Web App - Dev'
    environment:
      name: ragmodel_dev
    strategy:
     runOnce:
        deploy:
          steps:
          - download: current
            artifact: node-app

          - task: CmdLine@2
            displayName: 'Verify downloaded artifact'
            inputs:
              script: |
                echo "Listing downloaded artifacts:"
                ls -la $(Pipeline.Workspace)/node-app

          - task: AzureAppServiceManage@0
            displayName: 'Stop the Azure Web App'
            inputs:
              azureSubscription: 'Sparc-Azure'
              Action: 'Stop Azure App Service'
              WebAppName: 'app-ragfrontend-dev-wus-001'

          - task: AzureRmWebAppDeployment@5
            displayName: 'Deploy to Azure Web App - Dev'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Sparc-Azure'
              appType: 'webAppLinux'
              WebAppName: 'app-ragfrontend-dev-wus-001'
              packageForLinux: '$(Pipeline.Workspace)/node-app/release.zip'
              RuntimeStack: 'NODE|22-lts'
              DeploymentTypeLinux: 'zipDeploy'
              TakeAppOfflineFlag: true
              CleanDeploymentFlag: true
              StartupCommand: 'node server.js'

          - task: AzureAppServiceManage@0
            displayName: 'Start the Azure Web App'
            inputs:
              azureSubscription: 'Sparc-Azure'
              Action: 'Start Azure App Service'
              WebAppName: 'app-ragfrontend-dev-wus-001'

# Stage Deployment Stage
- stage: Deploy_Stage
  displayName: 'Deploy to Stage'
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/release'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Azure Web App - Stage'
    environment:
      name: ragmodel_stage
    strategy:
     runOnce:
        deploy:
          steps:
          - download: current
            artifact: node-app

          - task: CmdLine@2
            displayName: 'Verify downloaded artifact'
            inputs:
              script: |
                echo "Listing downloaded artifacts:"
                ls -la $(Pipeline.Workspace)/node-app

          - task: AzureAppServiceManage@0
            displayName: 'Stop the Azure Web App'
            inputs:
              azureSubscription: 'Sparc-Azure'
              Action: 'Stop Azure App Service'
              WebAppName: 'app-ragfrontend-stg-wus-001'

          - task: AzureRmWebAppDeployment@5
            displayName: 'Deploy to Azure Web App - Stage'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Sparc-Azure'
              appType: 'webAppLinux'
              WebAppName: 'app-ragfrontend-stg-wus-001' # Update this to your actual Stage Web App name
              packageForLinux: '$(Pipeline.Workspace)/node-app/release.zip'
              RuntimeStack: 'NODE|22-lts'
              DeploymentTypeLinux: 'zipDeploy'
              TakeAppOfflineFlag: true
              CleanDeploymentFlag: true
              StartupCommand: 'node server.js'

          - task: AzureAppServiceManage@0
            displayName: 'Start the Azure Web App'
            inputs:
              azureSubscription: 'Sparc-Azure'
              Action: 'Start Azure App Service'
              WebAppName: 'app-ragfrontend-stg-wus-001'